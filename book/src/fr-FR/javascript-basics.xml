<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Bases du JavaScript</title>

  <section>
    <title>Aperçu</title>

    <para>jQuery est conçu à partir du JavaScript, un langage riche et expressif
    en lui-même. Cette section couvre les concepts de base du JavaScript, aussi
    bien que des pièges fréquents pour ceux qui n'ont jamais utilisé le
    JavaScript. Même si elle a une valeur particulière pour ceux qui n'ont aucune
    expérience en programmation, ceux qui ont utilisé d'autres langages de programmation
    pourraient bénéficier de l'apprentissage de certaines des particularités du
    JavaScript.</para>

    <para>Si vous êtes intéressé par un apprentissage approfondi du langage JavaScript,
    je recommande beaucoup <citetitle>JavaScript: The Good Parts</citetitle> de
    Douglas Crockford.</para>
  </section>

  <section>
    <title>Synthaxe de Base</title>

    <para>Comprendre les déclarations, le nommage des variables, les espaces blancs, et autre
    syntaxe JavaScript de base.</para>

    <example id="javascript-basics.examples.variable-declaration">
      <title>Une simple déclaration de variable</title>

      <programlisting>var foo = 'bonjour le monde';</programlisting>
    </example>

    <example>
      <title>Les espaces blancs n'ont aucune sgnification en dehors des guillemets</title>

      <para><programlisting>var foo =         'bonjour le monde';</programlisting></para>
    </example>

    <example>
      <title>Les parenthèses indiquent la précédence</title>

      <programlisting>2 * 3 + 5;    // returne 11; la multiplication se déroule en premier
2 * (3 + 5);  // retourne 16; l'addition se déroule en premier</programlisting>
    </example>

    <example>
      <title>Les tabulations améliorent la lisibilité, mais n'ont aucune signification spéciale</title>

      <para><programlisting>var foo = function() {
    console.log('bonjour');
};</programlisting></para>
    </example>
  </section>

  <section>
    <title>Opérateurs</title>

    <section>
      <title>Opérateurs de Base</title>

      <para>Les opérateurs de base vous permettent de manipuler des valeurs.</para>

      <para><example>
          <title>Concaténation</title>

          <programlisting>var foo = 'bonjour';
var bar = 'le monde';

console.log(foo + ' ' + bar); // 'bonjour le monde'</programlisting>
        </example><example>
          <title>Multiplication et division</title>

          <para><programlisting>2 * 3;
2 / 3;</programlisting></para>
        </example><example>
          <title>Incrémentation et décrémentation</title>

          <para><programlisting>var i = 1;

var j = ++i;  // pré-incrément :  j égale 2; i égale 2
var k = i++;  // post-incrément : k égale 2; i égale 3</programlisting></para>
        </example></para>
    </section>

    <section>
      <title>Opérations sur les Nombres &amp; Chaines</title>

      <para>En JavaScript, les nombres et les chaines se comporteront occasionnellement comme
      vous ne l'expériez peut-être pas.</para>

      <example id="javascript-basics.examples.addition-concatenation">
        <title>Addition vs. concaténation</title>

        <para>
          <programlisting>var foo = 1;
var bar = '2';

console.log(foo + bar);  // 12. uh oh</programlisting>
        </para>
      </example>

      <example id="javascript-basics.examples.force-number">
        <title>Forcer une chaine à agir comme un nombre</title>

        <programlisting>var foo = 1;
var bar = '2';

// forcer la conversion de la chaine en nombre
console.log(foo + Number(bar));</programlisting>
      </example>

      <para>Le constructeur de Nombre, lorsqu'il est appelé comme une fonction (comme ci-dessus)
      aura l'effet de convertir son argument en nombre. Vous pouvez
      aussi utiliser l'opérateur unaire plus, qui fait la même chose :</para>

      <example id="javascript-basics.examples.force-number-unary">
        <title>Forcer une chaine à agir comme un nombre (en utilisant l'opérateur
        unaire plus)</title>

        <programlisting>
console.log(foo + +bar);</programlisting>
      </example>
    </section>

    <section>
      <title>Opérateurs Logiques</title>

      <para>Les opérateurs logiques vous permettent d'évaluer une série d'opérandes en utilisant
      les opérations ET et OU.</para>

      <para><example id="javascript-basics.examples.and-or">
          <title>Opérateurs logiques ET et OU</title>

          <programlisting>var foo = 1;
var bar = 0;
var baz = 2;

foo || bar;   // retourne 1, qui est vrai
bar || foo;   // retourne 1, qui est vrai

foo &amp;&amp; bar;   // retourne 0, qui est faux
foo &amp;&amp; baz;   // retourne 2, qui est vrai
baz &amp;&amp; foo;   // retourne 1, qui est vrai</programlisting>
        </example></para>

      <para>Même si ce n'est sûrement pas clair dans l'exemple, l'opérateur <code>||</code>
      retourne la valeur du premier opérande vrai, ou, au cas
      où aucun des opérandes n'est vrai, il retournera le dernier des deux opérandes.
      L'opérateur <code>&amp;&amp;</code> retourne la valeur du premier
      opérande faux, ou la valeur du dernier opérande si les deux opérandes sont
      vrais.</para>

      <para>Veuillez consulter <xref
      linkend="javascript-basics.sections.truthy-falsy" /> pour plus de détails à propos
      des valeurs qui sont estimées <code>vrai</code> qui sont estimées
      <code>faux</code>.</para>

      <note>
        <para>Vous verrez parfois des développeurs utiliser ces opérateurs logiques pour
        le contrôle du flux au lieu d'utiliser des déclarations <code>if</code>. Par
        exemple :</para>

        <programlisting>// faire quelque chose avec foo si foo est vrai
foo &amp;&amp; doSomething(foo);

// donner à bar la valeur de baz si baz est vrai ;
// sinon, lui donner la valeur
// retournée par createBar()
var bar = baz || createBar();</programlisting>

        <para>Ce style est assez élégant et agréablement succinct ; ceci dit, il
        peut être vraiment difficile à lire, spécialement pour les débutants. Je le mets
        ici pour que vous le reconnaissiez dans les codes que vous lisez, mais je n'en recommande
        pas l'utilisation tant que vous n'êtes pas habitué à sa signification et à la façon
        dont vous pouvez espérer qu'il se comporte.</para>
      </note>
    </section>

    <section>
      <title>Opérateurs de Comparaison</title>

      <para>Les opérateurs de comparaison vous permettent de tester si des valeurs sont
      équivalentes ou si des valeurs sont identiques.</para>

      <example>
        <title>Opérateurs de comparaison</title>

        <para><programlisting>var foo = 1;
var bar = 0;
var baz = '1';
var bim = 2;

foo == bar;   // retourne false
foo != bar;   // retourne true
foo == baz;   <emphasis role="bold">// retourne true; attention!</emphasis>

foo === baz;             // retourne false
foo !== baz;             // retourne true
foo === parseInt(baz);   // retourne true

foo &gt; bim;    // retourne false
bim &gt; baz;    // retourne true
foo &lt;= baz;   // retourne true</programlisting></para>
      </example>
    </section>
  </section>

  <section>
    <title>Code de Condition</title>

    <para>Parfois vous voulez uniquement exécuter un bloc de code sous certaines
    conditions. Le contrôle de flux — via des blocs <code>if</code> et <code>else</code>
    — vous permet d'exécuter du code uniquement sous certaines conditions.</para>

    <example>
      <title>Contrôle de flux</title>

      <programlisting>var foo = true;
var bar = false;

if (bar) {
    // ce code ne sera jamais exécuté
    console.log('hello!');
}

if (bar) {
    // ce code ne sera pas exécuté
} else {
    if (foo) {
        // ce code sera exécuté
    } else {
        // ce code aurait été exécuté si foo et bar étaient tous deux faux
    }
}</programlisting>
    </example>

    <note>
      <para>Même si les parenthèses ne sont pas strictement requises autour de déclarations
      <code>if</code> sur une ligne, les utiliser systématiquement, même quand elles
      ne sont pas strictement requises, conduit à un code largement plus lisible.</para>
    </note>

    <para>Rappelez-vous de ne pas définir des fonctions avec le même nom plusieurs fois
    entre des blocs <code>if</code>/<code>else</code> différents, car le faire peut
    ne pas donner le résultat escompté.</para>

    <section id="javascript-basics.sections.truthy-falsy">
      <title>Choses Vraies et Fausses</title>

      <para>Dans le but d'utiliser avec succès le contrôle du flux, il est important de
      comprendre les types de valeurs qui sont "vraies" et les types de valeurs
      qui sont "fausses". Parfois, les valeurs qui paraissent devoir être évaluées d'une
      façon, sont réellement évaluées d'une autre façon.</para>

      <example>
        <title>Les valeurs qui sont évaluées comme <code>vraie</code></title>

        <programlisting>'0'; 
'toute chaine';
[];  // un tableau vide
{};  // un objet vide
1;   // tout nombre différent de zéro</programlisting>
      </example>

      <example>
        <title>Les valeurs qui sont évaluées comme <code>fausses</code></title>

        <programlisting>0;
'';  // une chaine vide
NaN; // la variable JavaScript "not-a-number"
null;
undefined;  // attention -- undefined peut être redéfini !</programlisting>
      </example>
    </section>

    <section>
      <title>Assignement d'une Variable de Condition avec l'Opérateur Ternaire</title>

      <para>Parfois vous voulez donner une valeur à une variable en fonction d'une certaine
      condition. Vous pourriez utiliser une déclaration <code>if</code>/<code>else</code>,
      mais dans beaucoup de cas l'opérateur ternaire est plus convenable. <termdef>L'
      <firstterm>opérateur ternaire</firstterm> teste une condition ; si la
      condition est vraie, il retourne une certaine valeur, sinon il retourne une
      valeur différente.</termdef></para>

      <example>
        <title>L'opérateur ternaire</title>

        <programlisting>// donne à foo la valeur 1 si bar est vrai;
// sinon, donner à foo la valeur 0
var foo = bar ? 1 : 0;</programlisting>
      </example>

      <para>Même si l'opérateur ternaire peut être utilisé sans assigner la
      valeur retournée à une variable, ceci est généralement découragé.</para>
    </section>

    <section>
      <title>Déclarations Switch</title>

      <para>Au lieu d'utiliser une série de blocs if/else if/else, il peut être
      parfois utile d'utiliser plutôt la déclaration switch.
      Les <termdef><firstterm>déclarations Switch</firstterm> vérifient la valeur d'une
      variable ou expression, et exécutent des blocs de code différents selon
      la valeur.</termdef></para>

      <example>
        <title>Une déclaration switch</title>

        <programlisting>switch (foo) {

    case 'bar':
        alert('la valeur était bar -- yay!');
    break;

    case 'baz':
        alert('boo baz :(');
    break;

    default:
        alert('toute autre chose convient simplement');
    break;

}</programlisting>
      </example>

      <para>Les déclarations switch sont un peu tombés en disgrâce en JavaScript,
      parce que le même comportement peut souvent être accompli en créant un objet
      qui a plus de potentiel de réutilisation, test, etc. Par exemple :</para>

      <programlisting>var stuffToDo = {
    'bar' : function() { 
        alert('la valeur était bar -- yay!');
    },

    'baz' : function() { 
        alert('boo baz :(');
    },

    'default' : function() { 
        alert('toute autre chose convient simplement');
    }
};

if (stuffToDo[foo]) {
    stuffToDo[foo]();
} else {
    stuffToDo['default']();
}</programlisting>

      <para>Nous jetterons un coup d'oeil plus approfondi aux objets plus loin dans ce
      chapitre.</para>
    </section>
  </section>

  <section>
    <title>Boucles</title>

    <para>Les boucles vous permettent d'exécuter un bloc de code un certain nombre de fois.</para>

    <para><example id="javascript-basics.examples.loops">
        <title>Boucles</title>

        <programlisting>// logue 'essai 0', 'essai 1', ..., 'essai 4'
for (var i=0; i&lt;5; i++) {
    console.log('essai ' + i);
}</programlisting>
      </example><remark>Noter que dans <xref
    linkend="javascript-basics.examples.loops" /> même si nous utilisons le
    mot-clé <token>var</token> avant le nom de la variable <varname>i</varname>,
    cela ne limite pas la portée de la variable <varname>i</varname> au bloc dans la boucle.
    Nous discuterons plus en profondeur de la portée plus loin dans ce chapitre.</remark></para>

    <section>
      <title>La boucle for</title>

      <para>Une boucle <code>for</code> est faite de quatre déclarations et à la
      structure suivante :</para>

      <programlisting>for ([initialisation]; [condition]; [itération])
 [corpsDeLaBoucle]</programlisting>

      <para>La déclaration d'<emphasis>initialisation</emphasis> est exécutée une seule
      fois, avant que la boucle ne commence. Elle vous donne une opportunité de préparer ou
      de déclarer des variables.</para>

      <para>La déclaration de <emphasis>condition</emphasis> est exécutée avant
      chaque itération, et la valeur qu'elle retourne décide si oui ou non la boucle va
      continuer. Si la déclaration de condition est évaluée à une valeur fausse
      alors la boucle s'arrête.</para>

      <para>La déclaration d'<emphasis>itération</emphasis> est exécutée à la
      fin de chaque itération et vous fournit une opportunité de changer l'état
      de variables importantes. Typiquement, ceci impliquera l'incrémentation ou
      la décrémentation d'un compteur et amènera ainsi la boucle de plus en plus près de sa
      fin.</para>

      <para>La déclaration <emphasis>corpsDeLaBoucle</emphasis> est ce qui est éxécuté à chaque
      itération. Elle peut contenir tout ce que vous voulez. Vous aurez typiquement
      plusieurs déclarations qui doivent être exécutées et vous les entourerez donc d'un
      bloc ( <code>{...}</code>).</para>

      <para>Voici une boucle <code>for</code> typique :</para>

      <example>
        <title>Une boucle <code>for</code> typique</title>

        <programlisting>for (var i = 0, limit = 100; i &lt; limit; i++) {
    // Ce bloc sera exécuté 100 fois
    console.log('Actuellement à ' + i);
    // Note: le dernier log sera "Actuellement à 99"
}</programlisting>
      </example>
    </section>

    <section>
      <title>La boucle while</title>

      <para>Une boucle <code>while</code> est similaire à une déclaration <code>if</code>,
      excepté que son corps continuera d'être exécuté jusqu'à ce que la condition
      soit évaluée comme fausse.</para>

      <programlisting>while ([condition]) [corpsDeLaBoucle]</programlisting>

      <para>Voici une boucle <code>while</code> typique :</para>

      <example>
        <title>Une boucle <code>while</code> typique</title>

        <programlisting>var i = 0;
while (i &lt; 100) {

    // Ce bloc sera exécuté 100 fois
    console.log('Actuellement à ' + i);
    
    i++; // incrémente i
    
}</programlisting>
      </example>

      <para>Vous remarquerez que nous devons incrémenter le compteur à l'intérieur du
      corps de la boucle. Il est possible de combiner la condition et
      l'incrémenteur, comme ceci :</para>

      <example>
        <title>Une boucle <code>while</code> avec une condition et un incrément
        combinés</title>

        <programlisting>var i = -1;
while (++i &lt; 100) {
    // Ce bloc sera exécuté 100 fois
    console.log('Actuellement à ' + i);
}</programlisting>
      </example>

      <para>Notez que nous commençons à <code>-1</code> et utilisons le préfixe
      incrémenteur (<code>++i</code>).</para>
    </section>

    <section>
      <title>La boucle do-while</title>

      <para>C'est presque la même chose que la boucle <code>while</code>,
      excepté le fait que le corps de la boucle est exécuté au moins une fois
      avant que la condition ne soit testée.</para>

      <programlisting>do [corpsDeLaBoucle] while ([condition])</programlisting>

      <para>Voici une boucle <code>do-while</code> :</para>

      <example>
        <title>Une boucle <code>do-while</code></title>

        <programlisting>do {

    // Même si la condition est évaluée comme vraie
    // le corps de cette boucle sera toujours exécuté une fois.
    
    alert('Salut!');
    
} while (false);</programlisting>
      </example>

      <para>Ces types de boucles sont assez rares étant donné que peu de situations
      nécessitent une boucle qui s'exécute aveuglément au moins une fois. Néanmoins, il est
      bien d'en être informé.</para>
    </section>

    <section>
      <title>Rupture et continuation</title>

      <para>Habituellement, la fin d'une boucle sera le résultat d'une déclaration de
      condition qui n'est pas évaluée comme vraie, mais il est possible d'arrêter une boucle dans
      sont exécution dans le corps de la boucle avec la déclaration
      <code>break</code>.</para>

      <example>
        <title>Arrêter une boucle</title>

        <programlisting>for (var i = 0; i &lt; 10; i++) {
    if (quelque chose) {
        break;
    }
}</programlisting>
      </example>

      <para>Vous pouvez aussi vouloir continuer la boucle sans exécuter le reste du
      corps de la boucle. Ceci est fait en utilisant la déclaration
      <code>continue</code>.</para>

      <example>
        <title>Passer à l'itération suivante d'une boucle</title>

        <programlisting>for (var i = 0; i &lt; 10; i++) {
    
    if (quelque chose) {
        continue;
    }
    
    // La déclaration suivante devra être exécutée uniquement
    // si la condition 'quelque chose' n'a pas été remplie
    console.log('J\'ai été atteint');
    
}</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Mots Réservés</title>

    <para>Le JavaScript a plusieurs “mots réservés,” ou mots qui ont
    une signification spéciale dans le langage. Vous devriez éviter d'utiliser ces mots dans
    votre code excepté quand vous les utilisez à dessein.</para>

    <itemizedlist>
      <listitem>
        <para><code>break</code></para>
      </listitem>

      <listitem>
        <para><code>case</code></para>
      </listitem>

      <listitem>
        <para><code>catch</code></para>
      </listitem>

      <listitem>
        <para><code>continue</code></para>
      </listitem>

      <listitem>
        <para><code>default</code></para>
      </listitem>

      <listitem>
        <para><code>delete</code></para>
      </listitem>

      <listitem>
        <para><code>do</code></para>
      </listitem>

      <listitem>
        <para><code>else</code></para>
      </listitem>

      <listitem>
        <para><code>finally</code></para>
      </listitem>

      <listitem>
        <para><code>for</code></para>
      </listitem>

      <listitem>
        <para><code>function</code></para>
      </listitem>

      <listitem>
        <para><code>if</code></para>
      </listitem>

      <listitem>
        <para><code>in</code></para>
      </listitem>

      <listitem>
        <para><code>instanceof</code></para>
      </listitem>

      <listitem>
        <para><code>new</code></para>
      </listitem>

      <listitem>
        <para><code>return</code></para>
      </listitem>

      <listitem>
        <para><code>switch</code></para>
      </listitem>

      <listitem>
        <para><code>this</code></para>
      </listitem>

      <listitem>
        <para><code>throw</code></para>
      </listitem>

      <listitem>
        <para><code>try</code></para>
      </listitem>

      <listitem>
        <para><code>typeof</code></para>
      </listitem>

      <listitem>
        <para><code>var</code></para>
      </listitem>

      <listitem>
        <para><code>void</code></para>
      </listitem>

      <listitem>
        <para><code>while</code></para>
      </listitem>

      <listitem>
        <para><code>with</code></para>
      </listitem>

      <listitem>
        <para><code>abstract</code></para>
      </listitem>

      <listitem>
        <para><code>boolean</code></para>
      </listitem>

      <listitem>
        <para><code>byte</code></para>
      </listitem>

      <listitem>
        <para><code>char</code></para>
      </listitem>

      <listitem>
        <para><code>class</code></para>
      </listitem>

      <listitem>
        <para><code>const</code></para>
      </listitem>

      <listitem>
        <para><code>debugger</code></para>
      </listitem>

      <listitem>
        <para><code>double</code></para>
      </listitem>

      <listitem>
        <para><code>enum</code></para>
      </listitem>

      <listitem>
        <para><code>export</code></para>
      </listitem>

      <listitem>
        <para><code>extends</code></para>
      </listitem>

      <listitem>
        <para><code>final</code></para>
      </listitem>

      <listitem>
        <para><code>float</code></para>
      </listitem>

      <listitem>
        <para><code>goto</code></para>
      </listitem>

      <listitem>
        <para><code>implements</code></para>
      </listitem>

      <listitem>
        <para><code>import</code></para>
      </listitem>

      <listitem>
        <para><code>int</code></para>
      </listitem>

      <listitem>
        <para><code>interface</code></para>
      </listitem>

      <listitem>
        <para><code>long</code></para>
      </listitem>

      <listitem>
        <para><code>native</code></para>
      </listitem>

      <listitem>
        <para><code>package</code></para>
      </listitem>

      <listitem>
        <para><code>private</code></para>
      </listitem>

      <listitem>
        <para><code>protected</code></para>
      </listitem>

      <listitem>
        <para><code>public</code></para>
      </listitem>

      <listitem>
        <para><code>short</code></para>
      </listitem>

      <listitem>
        <para><code>static</code></para>
      </listitem>

      <listitem>
        <para><code>super</code></para>
      </listitem>

      <listitem>
        <para><code>synchronized</code></para>
      </listitem>

      <listitem>
        <para><code>throws</code></para>
      </listitem>

      <listitem>
        <para><code>transient</code></para>
      </listitem>

      <listitem>
        <para><code>volatile</code></para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Tableaux</title>

    <para>Arrays are zero-indexed lists of values. They are a handy way to
    store a set of related items of the same type (such as strings), though in
    reality, an array can include multiple types of items, including other
    arrays.</para>

    <example>
      <title>A simple array</title>

      <programlisting>var myArray = [ 'hello', 'world' ];</programlisting>
    </example>

    <example>
      <title>Accessing array items by index</title>

      <programlisting>var myArray = [ 'hello', 'world', 'foo', 'bar' ];
console.log(myArray[3]);   // logs 'bar'</programlisting>
    </example>

    <example>
      <title>Testing the size of an array</title>

      <programlisting>var myArray = [ 'hello', 'world' ];
console.log(myArray.length);   // logs 2</programlisting>
    </example>

    <example id="javascript-basics.examples.change-array-value">
      <title>Changing the value of an array item</title>

      <programlisting>var myArray = [ 'hello', 'world' ];
myArray[1] = 'changed';</programlisting>
    </example>

    <remark>While it's possible to change the value of an array item as shown
    in <xref linkend="javascript-basics.examples.change-array-value" />, it's
    generally not advised.</remark>

    <example>
      <title>Adding elements to an array</title>

      <programlisting>var myArray = [ 'hello', 'world' ];
myArray.push('new');</programlisting>
    </example>

    <example>
      <title>Working with arrays</title>

      <programlisting>var myArray = [ 'h', 'e', 'l', 'l', 'o' ];
var myString = myArray.join('');   // 'hello'
var mySplit = myString.split('');  // [ 'h', 'e', 'l', 'l', 'o' ]</programlisting>
    </example>
  </section>

  <section>
    <title>Objects</title>

    <para>Objects contain one or more key-value pairs. The key portion can be
    any string. The value portion can be any type of value: a number, a
    string, an array, a function, or even another object.</para>

    <para><termdef>When one of these values is a function, it’s called a
    <firstterm>method</firstterm> of the object.</termdef> Otherwise, they are
    called properties.</para>

    <para>As it turns out, nearly everything in JavaScript is an object —
    arrays, functions, numbers, even strings — and they all have properties
    and methods.</para>

    <example>
      <title>Creating an "object literal"</title>

      <programlisting>var myObject = {
    sayHello : function() {
        console.log('hello');
    },

    myName : 'Rebecca'
};

myObject.sayHello();            // logs 'hello'
console.log(myObject.myName);   // logs 'Rebecca'</programlisting>
    </example>

    <note>
      <para>When creating object literals, you should note that the key
      portion of each key-value pair can be written as any valid JavaScript
      identifier, a string (wrapped in quotes) or a number:</para>

      <programlisting>var myObject = {
    validIdentifier: 123,
    'some string': 456,
    99999: 789
};</programlisting>
    </note>

    <para>Object literals can be extremely useful for code organization; for
    more information, read <link
    xlink:href="http://blog.rebeccamurphey.com/2009/10/15/using-objects-to-organize-your-code/">Using
    Objects to Organize Your Code</link> by Rebecca Murphey.</para>
  </section>

  <section>
    <title>Functions</title>

    <para>Functions contain blocks of code that need to be executed
    repeatedly. Functions can take zero or more arguments, and can optionally
    return a value.</para>

    <para>Functions can be created in a variety of ways:</para>

    <example>
      <title>Function Declaration</title>

      <programlisting>function foo() { /* do something */ }</programlisting>
    </example>

    <example>
      <title>Named Function Expression</title>

      <programlisting>var foo = function() { /* do something */ }</programlisting>
    </example>

    <remark>I prefer the named function expression method of setting a
    function's name, for some rather <link
    xlink:href="http://yura.thinkweb2.com/named-function-expressions/">in-depth
    and technical reasons</link>. You are likely to see both methods used in
    others' JavaScript code.</remark>

    <section>
      <title>Using Functions</title>

      <example>
        <title>A simple function</title>

        <programlisting>var greet = function(person, greeting) {
    var text = greeting + ', ' + person;
    console.log(text);
};


greet('Rebecca', 'Hello');</programlisting>
      </example>

      <example>
        <title>A function that returns a value</title>

        <programlisting>var greet = function(person, greeting) {
    var text = greeting + ', ' + person;
    return text;
};

console.log(greet('Rebecca','hello'));</programlisting>
      </example>

      <example>
        <title>A function that returns another function</title>

        <programlisting>var greet = function(person, greeting) {
    var text = greeting + ', ' + person;
    return function() { console.log(text); };
};


var greeting = greet('Rebecca', 'Hello');
greeting();</programlisting>
      </example>
    </section>

    <section xml:id="javascript-basics.sections.self-executing-functions">
      <title>Self-Executing Anonymous Functions</title>

      <para>A common pattern in JavaScript is the self-executing anonymous
      function. This pattern creates a function expression and then
      immediately executes the function. This pattern is extremely useful for
      cases where you want to avoid polluting the global namespace with your
      code -- no variables declared inside of the function are visible outside
      of it.</para>

      <example xml:id="javascript-basics.examples.self-executing">
        <title>A self-executing anonymous function</title>

        <programlisting>(function(){
    var foo = 'Hello world';
})();


console.log(foo);   // undefined!</programlisting>
      </example>
    </section>

    <section>
      <title>Functions as Arguments</title>

      <para>In JavaScript, functions are "first-class citizens" -- they can be
      assigned to variables or passed to other functions as arguments. Passing
      functions as arguments is an extremely common idiom in jQuery.</para>

      <example>
        <title>Passing an anonymous function as an argument</title>

        <programlisting>var myFn = function(fn) {
    var result = fn();
    console.log(result);
};

myFn(function() { return 'hello world'; });   // logs 'hello world'</programlisting>
      </example>

      <example>
        <title>Passing a named function as an argument</title>

        <programlisting>var myFn = function(fn) {
    var result = fn();
    console.log(result);
};

var myOtherFn = function() {
    return 'hello world';
};

myFn(myOtherFn);   // logs 'hello world'</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Testing Type</title>

    <para>JavaScript offers a way to test the "type" of a variable. However,
    the result can be confusing -- for example, the type of an Array is
    "object".</para>

    <para>It's common practice to use the <code>typeof</code> operator when
    trying to determining the type of a specific value.</para>

    <example>
      <title>Testing the type of various variables</title>

      <programlisting>var myFunction = function() {
    console.log('hello');
};

var myObject = {
    foo : 'bar'
};

var myArray = [ 'a', 'b', 'c' ];

var myString = 'hello';

var myNumber = 3;

typeof myFunction;   // returns 'function'
typeof myObject;     // returns 'object'
typeof myArray;      // <emphasis role="bold">returns 'object' -- careful!</emphasis>
typeof myString;     // returns 'string';
typeof myNumber;     // returns 'number'

typeof null;         // <emphasis role="bold">returns 'object' -- careful!</emphasis>


if (myArray.push &amp;&amp; myArray.slice &amp;&amp; myArray.join) {
    // probably an array
    // (this is called "duck typing")
}

if (Object.prototype.toString.call(myArray) === '[object Array]') {
    // Definitely an array!
    // This is widely considered as the most robust way
    // to determine if a specific value is an Array.
}</programlisting>
    </example>

    <para>jQuery offers utility methods to help you determine the type of an
    arbitrary value. These will be covered later.</para>
  </section>

  <section xml:id="javascript-basics.sections.scope">
    <title>Scope</title>

    <para>"Scope" refers to the variables that are available to a piece of
    code at a given time. A lack of understanding of scope can lead to
    frustrating debugging experiences.</para>

    <para>When a variable is declared inside of a function using the
    <code>var</code> keyword, it is only available to code inside of that
    function -- code outside of that function cannot access the variable. On
    the other hand, functions defined <emphasis>inside</emphasis> that
    function <emphasis>will</emphasis> have access to to the declared
    variable.</para>

    <para>Furthermore, variables that are declared inside a function without
    the <code>var</code> keyword are not local to the function -- JavaScript
    will traverse the scope chain all the way up to the window scope to find
    where the variable was previously defined. If the variable wasn't
    previously defined, it will be defined in the global scope, which can have
    extremely unexpected consequences;</para>

    <example>
      <title>Functions have access to variables defined in the same
      scope</title>

      <programlisting>var foo = 'hello';

var sayHello = function() {
    console.log(foo);
};

sayHello();         // logs 'hello'
console.log(foo);   // also logs 'hello'</programlisting>
    </example>

    <example>
      <title>Code outside the scope in which a variable was defined does not
      have access to the variable</title>

      <programlisting>var sayHello = function() {
    var foo = 'hello';
    console.log(foo);
};

sayHello();         // logs 'hello'
console.log(foo);   // doesn't log anything</programlisting>
    </example>

    <example>
      <title>Variables with the same name can exist in different scopes with
      different values</title>

      <programlisting>var foo = 'world';

var sayHello = function() {
    var foo = 'hello';
    console.log(foo);
};

sayHello();         // logs 'hello'
console.log(foo);   // logs 'world'</programlisting>
    </example>

    <example xml:id="javascript-basics.examples.scope-value-change">
      <title>Functions can "see" changes in variable values after the function
      is defined</title>

      <programlisting>var myFunction = function() {
    var foo = 'hello';

    var myFn = function() {
        console.log(foo);
    };

    foo = 'world';

    return myFn;
};

var f = myFunction();
f();  // logs 'world' -- uh oh</programlisting>
    </example>

    <example>
      <title>Scope insanity</title>

      <programlisting>// a self-executing anonymous function
(function() {
    var baz = 1;
    var bim = function() { alert(baz); };
    bar = function() { alert(baz); };
})();

console.log(baz);  // baz is not defined outside of the function

bar();  // bar is defined outside of the anonymous function 
        // because it wasn't declared with var; furthermore,
        // because it was defined in the same scope as baz,
        // it has access to baz even though other code
        // outside of the function does not

bim();  // bim is not defined outside of the anonymous function,
        // so this will result in an error</programlisting>
    </example>
  </section>

  <section>
    <title>Closures</title>

    <para>Closures are an extension of the concept of scope — functions have
    access to variables that were available in the scope where the function
    was created. If that’s confusing, don’t worry: closures are generally best
    understood by example.</para>

    <para>In <xref linkend="javascript-basics.examples.scope-value-change" />
    we saw how functions have access to changing variable values. The same
    sort of behavior exists with functions defined within loops -- the
    function "sees" the change in the variable's value even after the function
    is defined, resulting in all clicks alerting 4.</para>

    <example>
      <title>How to lock in the value of <code>i</code>?</title>

      <programlisting>/* this won't behave as we want it to; */
/* every click will alert 5 */
for (var i=0; i&lt;5; i++) {
    $('&lt;p&gt;click me&lt;/p&gt;').appendTo('body').click(function() {
        alert(i);
    });
}</programlisting>
    </example>

    <example>
      <title>Locking in the value of <code>i</code> with a closure</title>

      <programlisting>/* fix: “close” the value of i inside createFunction, so it won't change */
var createFunction = function(i) {
    return function() { alert(i); };
};

for (var i=0; i&lt;5; i++) {
    $('p').appendTo('body').click(createFunction(i));
}</programlisting>
    </example>
  </section>
</chapter>
